- Object Detection: CV task that deals with identifying and locating objects of certain pre-defined classes within input images
- Algorithms and models such as R-CNN, Faster R-CNN, YOLO, and SSD

------ What is Convulation? 3B1B------- 
- A mathematical operation of two functions (f and g) that produces a third function (f*g)
- Kernel : a square matrix with values
- The Kernel values can produce a different types of output for a given input
- In image Convulation the original image is multiplied by the kernel to produce another image. 
- We can produce images with borders(verticle/horizontal) or blur (gaussian,etc).

------CNN----------
- number Detection
- image is passed through multiple layers of convolution and pooling and neural networks
- pooling decreases the dimension of the image conserving only the important aspects (edges and shapes) 
- Apply an aggregation function, such as max pooling or average pooling, on each window to obtain a single values

------R(Regional)CNN-------
- CNN gained prominence for image classification tasks, however, object detection required a more intricate solution, hence RCNN.
- Starts by dividing input image into multiple regions or subregions, generating a set of potential regions in the image that are likely to contain objects.
- These regional proposals relies on external methods like Selective Search or EdgeBoxes
- Selective serach operates by merging or splitting segments of the image based on various image cues like color, texture, and shape to create a diverse set of region proposals.
- Input image -> many segmented masks -> fewer masks -> main component in the image.
- What is RCNN? https://blog.roboflow.com/what-is-r-cnn/
- What is mAP(Mean Average Precision) - https://www.v7labs.com/blog/mean-average-precision#:~:text=Mean%20Average%20Precision(mAP)%20is%20a%20metric%20used%20to%20evaluate,values%20from%200%20to%201.

--------------------------
- CNNs are Two-shot Object Detection. Less efficient and more complex
- YOLO (You only look once) and SSD(Single Shot Multibox Detector) use a single single CNN. More efficient and less complex.
- Object Detection Evaluation Metrics : mAP, AP, IoU(Intersection over Union)
- Yolo algorithm for object detection - https://kili-technology.com/data-labeling/machine-learning/yolo-algorithm-real-time-object-detection-from-a-to-z

--------------- Deep Learning 3b1b ------------------------
- cost : error[Sum of squared error]


-------------- StatQuest Gradient Descent -------------------
- finding the best value for different parameters to find the best function to decrease the cost/error
- Normal way is to plug in different values of the parameters to get the minimum cost
- such discrete value may miss the actual minimum cost
- Gradient descent decreases the value in step wise manner to decrease the error
- The steps are larger when the gradient is far from the minimum and as it moves closer the steps become smaller
- Step size = slope * learning rate
- New value = Old value - step size
## Schotastic Gradient Descent
- For big data Gradient Descent is low
- Schotastic Gradient is especially useful when there are redundant data
- It is similar to Gradient Descent but it takes only one sample (or small batch of samples) for each step. 
- This means less parameters to worry about. 
- In the next step it takes another random sample (or small batch of sample) to improve the gradient.
- Another usefulness is when we add a data. We do not need to perform the gradient descent from the beginning, rather we can perform
  another step taking the new data as the sample and updating the parameters.

-------------------Football-Analysis-With-YOLO-------------------
- Download the YOLO model
- Detect the objects in the video with the YOLO model
- It detects many objects from its ~80 possible different classes
- We need to train the model to detect only the required objects (players, ball, and referees)
- Download the training dataset form roboflow
- Train with YOLO model and with the provided dataset to find the best model
- This model now detects the players, referees, and ball
- But our model still confuses between goalkeeper and players because of such less dataset
- Therefore, we need to change the detections from goalkeeper to players because detecting goalkeeper is not significant
- We use supervision library to seamlessly integration object tracking in our detection. 
- using Bytetrack() functionality it tracks our objects path and motion by assigning them with tracker id
- We store the detected data for player, referees, and the ball in a dictionary. It contains the bounding box information of 
  each classes
- So that we do not need to run the trackers every time we store the tracks data using studs and can import it after first run
- We now change the bouding box to a circular tracker for each player that follows the players. This is achieved my simply changing the bouding box to an ellipse. 
[[our initial output of the model is in runs directory and it gives bbox, however after we run it through main.py we take input video and process it and then produce
an output, in this step we draw an ellipse. Hence, this doesn't show the video output like that of a model.]]
- We now add the lable of each player with the ellipse